#!/usr/bin/python3

import re
import os
import argparse

def read_content(file):
    try:
        with open(file, "r") as f:
            content= f.read()
    except:
        raise
    return content

def header(function, version):
    return "%% %s(3) Version %s | MariaDB Connector/C\n" % (function, version)

def replace_links(content):
    links= list(re.compile(r'\[([^\]]+)\]\(([^)]+)\)').findall(content))
    for l in links:
        search = f"[{l[1]}()]({l[1]})"
        replace = f"**{l[1]}(3)**"
        content= content.replace(search, replace)
    return content

parser= argparse.ArgumentParser(prog="create_man.py",
                                description="Create man pages for MariaDB Connector/C")
parser.add_argument('--docs', type=str, metavar='docs', help='Directory of MariaDB Connector/C documentation')
parser.add_argument('--funcs', type=str, metavar='funcs', help='File which contains exported functions.')
parser.add_argument('--version', type=str, metavar='version', help='Connector/C version')
args= parser.parse_args()
print(args)

func_list= read_content(args.funcs)
funcs= func_list.split(";")

for function in funcs:

    try:
        print(f"{args.docs}/{function}.md")
        content = read_content(f"{args.docs}/{function}.md")

    except:
        print(f"warning: No documentation for function {function} found")
        continue

    with open(f"{function}.3.md", "w") as f:
        f.write(header(function, args.version))
        f.write(replace_links(content))
    ret = os.system(
        f"pandoc --standalone --to man {function}.3.md -o man/{function}.3"
    )
    os.unlink(f"{function}.3.md")
